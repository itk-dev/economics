on: pull_request
name: Review
jobs:
    test-composer-install:
        runs-on: ubuntu-latest
        strategy:
            fail-fast: false
            matrix:
                php: [ '8.1' ]
        name: Validate composer (PHP ${{ matrix.php}})
        steps:
            -   name: Checkout
                uses: actions/checkout@v2

            -   name: Setup PHP, with composer and extensions
                uses: shivammathur/setup-php@v2
                with:
                    php-version: ${{ matrix.php}}
                    extensions: apcu, ctype, iconv, imagick, json, pdo_sqlsrv, redis, soap, sqlsrv, xmlreader, zip
                    coverage: none

            -   name: Get composer cache directory
                id: composer-cache
                run: echo "::set-output name=dir::$(composer config cache-files-dir)"

            -   name: Cache composer dependencies
                uses: actions/cache@v2
                with:
                    path: ${{ steps.composer-cache.outputs.dir }}
                    key: ${{ matrix.php }}-composer-${{ hashFiles('**/composer.lock') }}
                    restore-keys: ${{ matrix.php }}-composer-

            -   name: Validate composer files
                run: composer validate composer.json --strict

            -   name: '[prod] Composer install with exported .env variables'
                run: |
                    set -a && source .env && set +a
                    APP_ENV=prod composer install --no-dev -o

            -   name: Reset composer install
                run: rm -rf ./vendor

            -   name: '[dev] Composer install with exported .env variables'
                run: |
                    set -a && source .env && set +a
                    APP_ENV=dev composer install

            -   name: Normalize composer files
                run: composer normalize --dry-run

    php-cs-fixer:
        runs-on: ubuntu-latest
        strategy:
            fail-fast: false
            matrix:
                php: [ '8.1' ]
        name: PHP Coding Standards Fixer (PHP ${{ matrix.php }})
        steps:
            -   name: Checkout
                uses: actions/checkout@v2

            -   name: Setup PHP, with composer and extensions
                uses: shivammathur/setup-php@v2
                with:
                    php-version: ${{ matrix.php}}
                    extensions: apcu, ctype, iconv, imagick, json, pdo_sqlsrv, redis, soap, sqlsrv, xmlreader, zip
                    coverage: none

            -   name: Get composer cache directory
                id: composer-cache
                run: echo "::set-output name=dir::$(composer config cache-files-dir)"

            -   name: Cache composer dependencies
                uses: actions/cache@v2
                with:
                    path: ${{ steps.composer-cache.outputs.dir }}
                    key: ${{ matrix.php }}-composer-${{ hashFiles('**/composer.lock') }}
                    restore-keys: ${{ matrix.php }}-composer-

            -   name: Install Dependencies
                run: composer install -q --no-ansi --no-interaction --no-scripts --no-suggest --no-progress --prefer-dist

            -   name: php-cs-fixer
                run: phpdbg -qrr ./vendor/bin/php-cs-fixer fix --dry-run

    psalm:
        runs-on: ubuntu-latest
        strategy:
            fail-fast: false
            matrix:
                php: [ '8.1' ]
        name: Psalm static analysis (${{ matrix.php}})
        steps:
            -   uses: actions/checkout@master

            -   name: Setup PHP, with composer and extensions
                uses: shivammathur/setup-php@v2
                with:
                    php-version: ${{ matrix.php}}
                    extensions: ctype, iconv, imagick, json, redis, soap, xmlreader, zip
                    coverage: none

            -   name: Get composer cache directory
                id: composer-cache
                run: echo "::set-output name=dir::$(composer config cache-files-dir)"

            -   name: Cache dependencies
                uses: actions/cache@v2
                with:
                    path: ${{ steps.composer-cache.outputs.dir }}
                    key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}-${{ matrix.dependency-version }}-
                    restore-keys: ${{ runner.os }}-composer-${{ matrix.dependency-version }}-

            -   name: Install Dependencies
                run: |
                    composer install -q --no-ansi --no-interaction --no-scripts --no-suggest --no-progress --prefer-dist
                    bin/console cache:clear

            -   name: Psalm
                run: ./vendor/bin/psalm --no-cache

    changelog:
        runs-on: ubuntu-latest
        name: Changelog should be updated
        strategy:
            fail-fast: false
        steps:
            -   name: Checkout
                uses: actions/checkout@v2
                with:
                    fetch-depth: 2

            -   name: Git fetch
                run: git fetch

            -   name: Check that changelog has been updated.
                run: git diff --exit-code origin/develop -- CHANGELOG.md && exit 1 || exit 0

    validate-doctrine-schema:
        runs-on: ubuntu-latest
        env:
            DATABASE_URL: mysql://db:db@127.0.0.1:3306/db_test?serverVersion=mariadb-10.5.13
        strategy:
            fail-fast: false
            matrix:
                php: [ '8.1' ]
        name: Validate Doctrine Schema (PHP ${{ matrix.php}})
        services:
            mariadb:
                image: mariadb:10.5.13
                env:
                    MYSQL_USER: db
                    MYSQL_PASSWORD: db
                    MYSQL_DATABASE: db_test
                    MYSQL_ROOT_PASSWORD: password
                ports:
                    - 3306:3306
                options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
        steps:
            -   name: Checkout
                uses: actions/checkout@v2

            -   name: Setup PHP, with composer and extensions
                uses: shivammathur/setup-php@v2
                with:
                    php-version: ${{ matrix.php}}
                    extensions: apcu, ctype, iconv, imagick, json, pdo_sqlsrv, redis, soap, sqlsrv, xmlreader, zip
                    coverage: none

            -   name: Get composer cache directory
                id: composer-cache
                run: echo "::set-output name=dir::$(composer config cache-files-dir)"

            -   name: Cache composer dependencies
                uses: actions/cache@v2
                with:
                    path: ${{ steps.composer-cache.outputs.dir }}
                    key: ${{ matrix.php }}-composer-${{ hashFiles('**/composer.lock') }}
                    restore-keys: ${{ matrix.php }}-composer-

            -   name: 'Composer install with exported .env variables'
                run: |
                    set -a && source .env && set +a
                    APP_ENV=prod composer install --no-dev -o

            -   name: Run Doctrine Migrations
                run: APP_ENV=prod php bin/console doctrine:migrations:migrate --no-interaction

            -   name: Validate Doctrine schema
                run: APP_ENV=prod php bin/console doctrine:schema:validate


    validate-publiccode:
        runs-on: ubuntu-latest
        steps:
            -   name: Checkout
                uses: actions/checkout@v2

            -   name: Validate publiccode.yml
                # https://github.com/italia/publiccode-parser-go#easy-validation-with-docker
                run: docker run --interactive italia/publiccode-parser-go /dev/stdin < publiccode.yml

    assets-coding-standards:
        name: Assets coding standards
        runs-on: ubuntu-latest
        steps:
            -   name: Checkout
                uses: actions/checkout@v3

            -   name: Coding standards
                run: |
                    docker network create frontend
                    docker compose run --rm node npm install
                    docker compose run --rm node npm run check-coding-standards

    phpunit:
        runs-on: ubuntu-latest
        services:
            mariadb:
                image: mariadb:lts
                ports:
                    - 3306
                env:
                    MYSQL_USER: db
                    MYSQL_PASSWORD: db
                    MYSQL_DATABASE: db_test
                    MYSQL_ROOT_PASSWORD: password
                options: --health-cmd="mysqladmin ping" --health-interval=5s --health-timeout=2s --health-retries=3
        strategy:
            fail-fast: false
            matrix:
                php: [ "8.1" ]
        name: PHP Unit tests (PHP ${{ matrix.php }})
        steps:
            -   name: Checkout
                uses: actions/checkout@v3

            -   name: Setup PHP, with composer and extensions
                uses: shivammathur/setup-php@v2
                with:
                    php-version: ${{ matrix.php}}
                    extensions: apcu, ctype, iconv, imagick, json, redis, soap, xmlreader, zip
                    coverage: none

            -   name: Get composer cache directory
                id: composer-cache
                run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

            -   name: Cache composer dependencies
                uses: actions/cache@v3
                with:
                    path: ${{ steps.composer-cache.outputs.dir }}
                    key: ${{ matrix.php }}-composer-${{ hashFiles('**/composer.lock') }}
                    restore-keys: ${{ matrix.php }}-composer-

            -   name: Install Dependencies
                run: composer install -q --no-ansi --no-interaction --no-scripts --no-suggest --no-progress --prefer-dist

            -   name: PHP Unit
                env:
                    PORT: ${{ job.services.mariadb.ports[3306] }}
                run: DATABASE_URL="mysql://db:db@127.0.0.1:$PORT/db_test" composer tests
